#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π PTT –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import traceback
from pathlib import Path

def test_config():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from config import CONFIG, AppConfig
        
        print(f"  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"  ‚úì PTT –∫–ª–∞–≤–∏—à–∞: {CONFIG.ptt_key}")
        print(f"  ‚úì Whisper –º–æ–¥–µ–ª—å: {CONFIG.whisper.model}")
        print(f"  ‚úì Ollama –º–æ–¥–µ–ª—å: {CONFIG.ollama.model}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if CONFIG.validate():
            print("  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        else:
            print("  ‚úó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_logging():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        from logging_config import setup_logging, get_logger
        from config import CONFIG
        
        logger = setup_logging(CONFIG.logging)
        test_logger = get_logger("test")
        
        test_logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        test_logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        
        print("  ‚úì –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        print("  ‚úì –õ–æ–≥–≥–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_audio_manager():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    try:
        from audio_manager import AudioManager
        from config import CONFIG
        
        audio_manager = AudioManager(CONFIG.audio)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = audio_manager.get_available_devices()
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—É—Ñ–µ—Ä–µ
        buffer_duration = audio_manager.get_buffer_duration()
        print(f"  ‚úì –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É—Ñ–µ—Ä–∞: {buffer_duration:.2f}s")
        
        # –û—á–∏—Å—Ç–∫–∞
        audio_manager.cleanup()
        print("  ‚úì –ê—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_whisper_service():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è Whisper —Å–µ—Ä–≤–∏—Å–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è Whisper —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        from transcription_service import WhisperService
        from config import CONFIG
        
        whisper_service = WhisperService(CONFIG.whisper)
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        model_info = whisper_service.get_model_info()
        print(f"  ‚úì –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {model_info.get('status', 'unknown')}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = whisper_service.get_stats()
        print(f"  ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_transcriptions']} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
        
        # –û—á–∏—Å—Ç–∫–∞
        whisper_service.cleanup()
        print("  ‚úì Whisper —Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_llm_service():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        from llm_service import LLMService
        from config import CONFIG
        
        llm_service = LLMService(CONFIG.ollama)
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
        service_info = llm_service.get_service_info()
        print(f"  ‚úì –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {service_info['main_provider']}")
        print(f"  ‚úì –ú–æ–¥–µ–ª—å: {service_info['main_model']}")
        
        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        connection_status = llm_service.ollama_service.test_connection()
        print(f"  ‚úì –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {'OK' if connection_status else 'FAILED'}")
        
        # –û—á–∏—Å—Ç–∫–∞
        llm_service.cleanup()
        print("  ‚úì LLM —Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_text_injection():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞...")
    try:
        from text_injection_service import TextInjectionService
        from config import CONFIG
        
        injection_service = TextInjectionService(CONFIG.text_injection)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ
        window_info = injection_service._get_active_window_info()
        print(f"  ‚úì –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {window_info['title']}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = injection_service.get_stats()
        print(f"  ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç–∞–≤–æ–∫: {stats['total_injections']}")
        
        # –û—á–∏—Å—Ç–∫–∞
        injection_service.cleanup()
        print("  ‚úì –°–µ—Ä–≤–∏—Å –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_tray_interface():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è —Ç—Ä–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ç—Ä–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    try:
        from tray_interface import TrayIcon
        from config import CONFIG
        
        tray = TrayIcon(CONFIG)
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        tray.set_status("ready")
        print("  ‚úì –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        test_stats = {"total_recordings": 5, "total_transcriptions": 3, "total_injections": 2}
        tray.update_stats(test_stats)
        print("  ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –û—á–∏—Å—Ç–∫–∞
        tray.cleanup()
        print("  ‚úì –¢—Ä–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π PTT –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 50)
    
    tests = [
        test_config,
        test_logging,
        test_audio_manager,
        test_whisper_service,
        test_llm_service,
        test_text_injection,
        test_tray_interface
    ]
    
    results = []
    
    for test in tests:
        try:
            result = test()
            results.append(result)
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"  ‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)
            print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)
